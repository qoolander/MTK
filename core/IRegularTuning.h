#ifndef MUSICTOOLKIT_IREGULARTUNING_H
#define MUSICTOOLKIT_IREGULARTUNING_H

#include <string>
#include <optional>
#include <Eigen/Dense>
#include <memory>
#include "IScale.h"

namespace MTK::Core {

 	///\brief An interfaces that defines the functionality of a "regular tuning system". This is the base class for regular temperaments of any rank - including equal division tuning system
    template<typename Vector>
    class IRegularTuning {
    public:
        /// \returns The frequency of the note at the given coordinate
        virtual std::optional<Vector> getCoordinate(float frequency) = 0;


        /// \returns The frequency given by the mapping at coordinate
        virtual float getFrequency(Vector coordinate) = 0;

        /// \returns The name of the note at the coordinate point according to a fifth like interval as a generator and a sagital like accidental system
        virtual std::string getNoteName(Vector coordinate) = 0;

        /// \returns a scale generated by the Tuning with a given number of notes per period
        virtual std::unique_ptr<IScale> generateScale(int notesPerPeriod) = 0;

        virtual float getFundamentalFrequency() const { return fundamentalFrequency; }

        virtual void setFundamentalFrequency(float fundamentalFrequency) { IRegularTuning::fundamentalFrequency = fundamentalFrequency; }

    protected:
        float fundamentalFrequency{};
        float period;
    };
}


#endif //MUSICTOOLKIT_IREGULARTUNING_H
